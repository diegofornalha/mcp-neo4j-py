#!/bin/bash
# Script de verifica√ß√£o do MCP Neo4j Agent Memory

echo "======================================"
echo "üîç Verifica√ß√£o do MCP Neo4j Setup"
echo "======================================"

# 1. Verificar container Docker
echo -e "\n1Ô∏è‚É£ Status do Container MCP:"
if docker ps | grep -q mcp-neo4j-agent; then
    echo "‚úÖ Container mcp-neo4j-agent est√° rodando"
    docker ps | grep mcp-neo4j-agent | awk '{print "   Container ID: " $1 "\n   Uptime: " $5 " " $6 " " $7}'
else
    echo "‚ùå Container mcp-neo4j-agent N√ÉO est√° rodando"
fi

# 2. Verificar container Neo4j
echo -e "\n2Ô∏è‚É£ Status do Neo4j:"
if docker ps | grep -q terminal-neo4j; then
    echo "‚úÖ Container terminal-neo4j est√° rodando"
    # Testar conex√£o
    if docker exec terminal-neo4j cypher-shell -u neo4j -p "Neo4j@1992" "RETURN 1" &>/dev/null; then
        echo "‚úÖ Conex√£o com Neo4j funcionando"
    else
        echo "‚ùå Erro na conex√£o com Neo4j"
    fi
else
    echo "‚ùå Container terminal-neo4j N√ÉO est√° rodando"
fi

# 3. Verificar proxy MCP
echo -e "\n3Ô∏è‚É£ Teste do Proxy MCP:"
if [ -f /home/codable/terminal/mcp-proxy.js ]; then
    echo "‚úÖ Arquivo proxy existe"
    # Testar proxy
    RESPONSE=$(echo '{"jsonrpc":"2.0","method":"tools/list","params":{},"id":1}' | timeout 2 node /home/codable/terminal/mcp-proxy.js 2>/dev/null | grep -o '"jsonrpc":"2.0"')
    if [ ! -z "$RESPONSE" ]; then
        echo "‚úÖ Proxy MCP respondendo corretamente"
    else
        echo "‚ö†Ô∏è  Proxy MCP n√£o respondeu ao teste"
    fi
else
    echo "‚ùå Arquivo proxy n√£o encontrado"
fi

# 4. Verificar configura√ß√£o .mcp.json
echo -e "\n4Ô∏è‚É£ Configura√ß√£o MCP:"
if [ -f /home/codable/terminal/.mcp.json ]; then
    echo "‚úÖ Arquivo .mcp.json existe"
    if grep -q "mcp-proxy.js" /home/codable/terminal/.mcp.json; then
        echo "‚úÖ Configura√ß√£o usando proxy"
    else
        echo "‚ö†Ô∏è  Configura√ß√£o n√£o est√° usando proxy"
    fi
else
    echo "‚ùå Arquivo .mcp.json n√£o encontrado"
fi

# 5. Verificar dados no Neo4j
echo -e "\n5Ô∏è‚É£ Dados no Neo4j:"
MEMORY_COUNT=$(docker exec terminal-neo4j cypher-shell -u neo4j -p "Neo4j@1992" --format plain "MATCH (m:Memory) RETURN COUNT(m) as count" 2>/dev/null | grep -o '[0-9]*' | head -1)
if [ ! -z "$MEMORY_COUNT" ]; then
    echo "‚úÖ Neo4j tem $MEMORY_COUNT n√≥(s) Memory"
else
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel contar n√≥s Memory"
fi

# 6. Status final
echo -e "\n======================================"
echo "üìä Resumo Final:"
echo "======================================"
echo "‚Ä¢ Container MCP: $(docker ps | grep -q mcp-neo4j-agent && echo '‚úÖ OK' || echo '‚ùå Problema')"
echo "‚Ä¢ Container Neo4j: $(docker ps | grep -q terminal-neo4j && echo '‚úÖ OK' || echo '‚ùå Problema')"
echo "‚Ä¢ Proxy MCP: $([ -f /home/codable/terminal/mcp-proxy.js ] && echo '‚úÖ OK' || echo '‚ùå Problema')"
echo "‚Ä¢ Configura√ß√£o: $([ -f /home/codable/terminal/.mcp.json ] && echo '‚úÖ OK' || echo '‚ùå Problema')"
echo ""
echo "üéØ Para testar o MCP no Claude, use:"
echo "   claude mcp list"
echo ""